-return a list of card ranks, sorted with higher first
def card_ranks(hand):
  ranks = ['--23456789TJQKA'.index(r) for r,s in hand]
  ranks.sort(reverse=True)
  return ranks

-determining if a hand is a straight (hand is represented by an array of length 5 and members are in order):
def straight(ranks):
  return (max(ranks) - min(ranks) == 4) and len(set(ranks)) == 5

-determining if a hand is a flush (hand is represented by an array of length 5 composed of tuples where the first index is rank and second is the suit)
def flush(hand):
  suits = [r,s in hand]

-In a 2-D matrix, every row is increasingly sorted from left to right, and the last number in each row is not greater than the first number of the next row. A sample matrix follows. Please implement a function to check whether a number is in such a matrix or not. It returns true if it tries to find the number 7 in the sample matrix, but it returns false if it tries to find the number 12.
1  3  5
7  9  11 
13 15 17
-The naive solution with brute force is to scan all numbers in the input matrix. Obviously, it costs O(mn) time if the size of the matrix is m√ón.
Since each row in the matrix is sorted and the first number of a row is guaranteed to be greater than or equal to the last number of the preceding row, the matrix can be viewed as a 1-D sorted array. If all rows in the sample matrix are concatenated in top down order, it forms a sorted array {1, 3, 5, 7, 9, 11, 13, 15, 17} which we can perform a binary search on

boolean find(int matrix[][], int value) {
  int rows = matrix.length;
  int cols = matrix[0].length;
  int start = 0;
  int end = rows * cols - 1;
  
  while (start <= end) {
    int mid = start + (end - start) / 2;
    int row = mid / cols;
    int col = mid % cols;
    int v = matrix[row][col];
    
    if (v == value)
        return true;
    if (v > value)
        end = mid - 1;
    else
        start = mid + 1;
  }
  return false;
}

// custom string compare fxn
function biggestNumCompare(x, y) {
  x = (x).toString();
  y = (y).toString();

  var XY = x.concat(y),
      YX = y.concat(x);

  return parseInt(YX) - parseInt(XY);   // returns biggest num. To get the smallest num: parseInt(XY) - parseInt(YX);
}

// how to recursively try and not try every element in an array without having to splice (note: inefficient as there's a lot of repeated operations)
function recursiveKnapsack(capacity, size, value, n) {
  if (capacity === 0 || n === size.length) {
    return 0;
  }

  if (size[n] > capacity) {
    return recursiveKnapsack(capacity, size, value, n + 1);
  } else {
    return Math.max(value[n] + recursiveKnapsack(capacity - size[n], size, value, n + 1),
                    recursiveKnapsack(capacity, size, value, n + 1));
  }
}

https://github.com/begriffs/immutube
https://vimeo.com/97575933
jsbin.com/yoyip
-Rambda (http://ramdajs.com/docs/) 
 -<script src="https://cdnjs.cloudflare.com/ajax/libs/ramda/0.8.0/ramda.min.js"></script>

CURRYING
http://jsbin.com/romun (change 'rambda' in line 1 to 'R'. You'll also probably have to update the CDN for Ramda)
 -http://jsbin.com/rewotekago/1/edit?html,js,console,output

var split2 = _.split(' '); // function (n){return r.apply(this,arguments)}
console.log(split2('once upon a time')); // ['once','upon','a','time']

var size2 = _.size(); // function (n){return n.length}
var map2 = _.map(_.size); // function (n){return r(t,n)}
 -map takes in 2 args: 1st arg is the callback to apply to each element of the array and the 2nd arg is the array itself

console.log(_.get); 
function (r,t) {
  switch(arguments.length) { 
    case 0: throw n();
    case 1: return function(n) {
              return n[r]
            }
  }
  return t[r]
}

COMPOSE
http://jsbin.com/jevag
 -http://jsbin.com/tefatixubu/1/edit?html,js,console,output

var lengths = _.compose(
  _.map(_.size), _.split(' ')
);
console.log(lengths('once upon a time')); // [4,4,1,4]
/* compose is right associative so compose(f, g) can be interpreted as f(g(x)) 
   -length takes in a single argument that is first split() by ' '. The 2nd fxn is map() which takes in the first argument which is size(). The 2nd argument is the results of split()?
*/

FUNCTOR - an object or data structure that you can map over (you can call them 'mappables')
-ex: http://jsbin.com/durakeyajo/1/edit
-sol: http://jsbin.com/xiwofojura

EITHER/IO
-ex: http://jsbin.com/zegat/7/edit
-sol: http://jsbin.com/nagedowiro/1/edit?js,console,output

OTHER FUNCTORS
-ex: jsbin.com/yikoqi/3/edit
-sol: http://jsbin.com/jucezajigu/1/edit

MONADS:
-ex: http://jsbin.com/woweg/edit?html,js,output
-sol: http://jsbin.com/qilohivogu/1/edit?js,console,output

-Monads allow you to nest computations. They are a pointed functor that adds mjoin and chain functions to combine other functors.

APPLICATIVE FUNCTORS AND MONOIDS: http://vimeo.com/97575933

MONOIDS
-ex: http://jsbin.com/cedezeqayi
-sol: http://jsbin.com/gujapijoji/1/edit

EXTRA/MISC (may be duplicates):
http://jsbin.com/gujapijoji/1/edit?js,console,output
http://jsbin.com/perutuyijo